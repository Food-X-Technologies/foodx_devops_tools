name: Python build harness
on:
  - push

env:
  FLIT_ROOT_INSTALL: 1

  PYPI_API_USER: __token__

  VENV_DIR: /venv
  VENV_BIN: /venv/bin

  CALL_TARGET: ${VENV_BIN}/build-harness

  IMAGE_PATH: "foodxtech/foodx-devops-tools-pipeline:${{ github.sha }}"


jobs:
  build-docker-image:
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - run: |
          docker build \
            -t ${{ env.IMAGE_PATH }} \
            docker/pipeline
          docker push ${{ env.IMAGE_PATH }}


  formatting-check:
    env:
      TARGET: formatting --check
    needs:
      - build-docker-image

    container:
      image: "foodxtech/foodx-devops-tools-pipeline:${{ github.sha }}"
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2
      - run: ${{ env.CALL_TARGET }} ${TARGET}


  flake8-check:
    env:
      TARGET: static-analysis --analysis flake8
    needs:
      - build-docker-image

    container:
      image: "foodxtech/foodx-devops-tools-pipeline:${{ github.sha }}"
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2
      - run: |
          echo "system Python version: "$(python3 --version)
          echo "venv Python version: "$(${{ env.VENV_BIN }}/python3 --version)
          ${{ env.CALL_TARGET }} ${TARGET}


  mypy-check:
    env:
      TARGET: static-analysis --analysis mypy
    needs:
      - build-docker-image

    container:
      image: "foodxtech/foodx-devops-tools-pipeline:${{ github.sha }}"
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2
      - run: ${{ env.CALL_TARGET }} ${TARGET}


  pydocstyle-check:
    env:
      TARGET: static-analysis --analysis pydocstyle
    needs:
      - build-docker-image

    container:
      image: "foodxtech/foodx-devops-tools-pipeline:${{ github.sha }}"
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2
      - run: ${{ env.CALL_TARGET }} ${TARGET}


  unit-tests:
    env:
      # have to avoid the new manual directory in CI pipeline
      TARGET: unit-test --test-dir tests/ci
    needs:
      - build-docker-image

    container:
      image: "foodxtech/foodx-devops-tools-pipeline:${{ github.sha }}"
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2
      - run: ${{ env.CALL_TARGET }} ${TARGET}


  unit-tests-coverage-report:
    env:
      # Don't forget to update the coverage threshold in .pre-commit-config.yaml
      # have to avoid the new manual directory in CI pipeline
      TARGET: unit-test --test-dir tests/ci --coverage-html
    needs:
      - build-docker-image

    container:
      image: "foodxtech/foodx-devops-tools-pipeline:${{ github.sha }}"
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2
      - run: ${{ env.CALL_TARGET }} ${TARGET}
      - uses: actions/upload-artifact@v2
        with:
          name: coverage-report-artifacts-${{ matrix.python-version }}
          path: dist/coverage_report


  unit-tests-coverage-check:
    env:
      # Don't forget to update the coverage threshold in .pre-commit-config.yaml
      # Setting CI threshold to 80% because GHA calculates a different coverage result than locally (92%);
      # the problem seems to be with several files, including foodx_devops_tools/pull/puffignore.py (32% coverage in
      # GHA, 100% coverage locally).
      # have to avoid the new manual directory in CI pipeline
      TARGET: unit-test --test-dir tests/ci --check 80
    needs:
      - build-docker-image

    container:
      image: "foodxtech/foodx-devops-tools-pipeline:${{ github.sha }}"
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2
      - run: ${{ env.CALL_TARGET }} ${TARGET}


  build-packages:
    needs:
      - build-docker-image

    container:
      image: "foodxtech/foodx-devops-tools-pipeline:${{ github.sha }}"
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2
        with:
          # need all tags and branch info for release-flow utility.
          # https://github.com/actions/checkout#fetch-all-history-for-all-tags-and-branches
          fetch-depth: 0
      - run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          export THIS_VERSION=$(${{ env.VENV_BIN }}/release-flow --default-branch main)
          echo ${THIS_VERSION}
          ${{ env.CALL_TARGET }} package --release-id ${THIS_VERSION}
      - uses: actions/upload-artifact@v2
        with:
          name: distribution-package-artifacts
          path: dist


  install-check:
    needs:
      - build-packages

    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: distribution-package-artifacts
          path: dist
      - run: |
          python3 -m venv venv
          ls dist
          venv/bin/pip install dist/*.whl


  publish-release-packages:
    concurrency: publish
    env:
      PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
    # Lack of regular expression parsing limits what conditions are possible here.
    # Want to scope in on valid semantic versions https://semver.org including "alpha", "beta" pre-releases.
    if: ${{ startsWith(github.ref, 'refs/tags/') && !contains(github.ref, '+dryrun') }}
    needs:
      - build-packages
      - build-docker-image
      # don't "need" anything from install-check, but definitely don't want to publish if it fails
      - install-check

    container:
      image: "foodxtech/foodx-devops-tools-pipeline:${{ github.sha }}"
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: distribution-package-artifacts
          path: dist
      - run: |
          echo "github.ref: ${{ github.ref }}"
          ls dist/
          ${{ env.CALL_TARGET }} publish --user ${PYPI_API_USER} --password ${PYPI_TOKEN}


  publish-release-dryrun:
    concurrency: publish
    env:
      PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
    if: ${{ startsWith(github.ref, 'refs/tags/') && contains(github.ref, '+dryrun') }}
    needs:
      # don't ever publish here, so don't depend on install-check to make pipeline slightly faster
      - build-packages
      - build-docker-image

    container:
      image: "foodxtech/foodx-devops-tools-pipeline:${{ github.sha }}"
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: distribution-package-artifacts
          path: dist
      - run: |
          echo "github.ref: ${{ github.ref }}"
          ls dist/
          ${{ env.CALL_TARGET }} publish --user ${PYPI_API_USER} --password ${PYPI_TOKEN} --dryrun



  publish-prerelease-baseline-packages:
    concurrency: publish
    env:
      PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
    if: ${{ startsWith(github.ref, 'refs/heads/main') }}
    needs:
      - build-packages
      - build-docker-image
      # don't "need" anything from install-check, but definitely don't want to publish if it fails
      - install-check

    container:
      image: "foodxtech/foodx-devops-tools-pipeline:${{ github.sha }}"
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: distribution-package-artifacts
          path: dist
      # Main branch publish pre-release "baseline" package (semantic version "-post.N" release id suffix).
      - run: |
          # debug logging
          echo "github.ref: ${{ github.ref }}"
          ls dist/
          # publish main branch packages with appropriate release id
          ${{ env.CALL_TARGET }} publish --user ${PYPI_API_USER} --password ${PYPI_TOKEN}


  publish-feature-packages:
    concurrency: publish
    env:
      PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
    if: ${{ !startsWith(github.ref, 'refs/tags/') && !startsWith(github.ref, 'refs/heads/main') }}
    needs:
      # don't ever publish here, so don't depend on install-check to make pipeline slightly faster
      - build-packages
      - build-docker-image

    container:
      image: "foodxtech/foodx-devops-tools-pipeline:${{ github.sha }}"
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: distribution-package-artifacts
          path: dist
      # Don't publish feature branch packages, just provide diagnostic logging.
      - run: |
          # debug logging
          echo "github.ref: ${{ github.ref }}"
          ls dist/
